module registers (
    net(red) io [
        write_addr
        write_value
        write_trigger
        read_1_addr
        read_1_value
        read_2_addr
        read_2_value
    ]
) {
    net(red) write_value_neg [memory]
    net(red) tmp [write_value]
    tmp[write_value] <- value if io[write_trigger == 1]
    write_value_neg[memory] <- tmp[write_value * -1] 

    net(red) read_1 [memory]
    net(red) read_2 [memory]
    io[read_1_value] <- read_1[memory]
    io[read_2_value] <- read_2[memory]

    number_of_registers = 32
    loop address from 1 to number_of_registers {
        net(green) memory [memory]
        # Memory loop
        memory[memory] <- memory[memory]
        # Readout
        read_1[memory] <- value if (io memory)[read_1_addr == address]
        read_2[memory] <- value if (io memory)[read_2_addr == address]
        # Writeback 
        net(red) override [write_trigger memory]
        # Check write address
        override[write_trigger] <- value if io[write_addr == address]
        # Clear previous value, add new one
        override[memory] <- (write_value_neg memory)[memory * -1]
        # Check trigger
        memory[memory] <- value if override[write_trigger == 1]
    }
}